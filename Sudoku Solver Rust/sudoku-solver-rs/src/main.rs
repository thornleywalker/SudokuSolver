mod sudoku;
use sudoku::*;

const SOLVED_TEST_1: &str = "[
[4,3,5, 2,6,9, 7,8,1],
[6,8,2, 5,7,1, 4,9,3],
[1,9,7, 8,3,4, 5,6,2],

[8,2,6, 1,9,5, 3,4,7],
[3,7,4, 6,8,2, 9,1,5],
[9,5,1, 7,4,3, 6,2,8],

[5,1,9, 3,2,6, 8,7,4],
[2,4,8, 9,5,7, 1,3,6],
[7,6,3, 4,1,8, 2,5,9],
]";
const EASY_TEST_1: &str = "[
[0,0,0, 6,0,2, 0,0,0],
[2,0,0, 8,3,1, 0,4,0],
[0,0,0, 5,4,9, 8,0,0],

[4,2,0, 0,6,3, 1,8,5],
[0,0,8, 4,0,0, 0,0,2],
[0,6,0, 9,0,8, 3,7,0],

[8,0,2, 0,0,7, 4,9,0],
[0,0,5, 3,9,0, 2,0,8],
[0,0,0, 0,8,0, 0,0,3],
]";
const MEDIUM_TEST_1: &str = "[
[8,4,0, 0,1,0, 3,9,0],
[0,0,6, 0,4,0, 0,0,0],
[0,2,3, 5,0,0, 0,0,4],

[0,0,0, 0,0,0, 0,4,0],
[5,1,4, 0,0,0, 7,3,2],
[0,0,0, 4,0,1, 0,5,0],

[0,6,9, 0,0,0, 0,7,3],
[3,0,7, 2,9,0, 0,0,0],
[0,0,0, 0,3,0, 9,0,5],
]";
const HARD_TEST_1: &str = "[
[0,0,0, 0,9,0, 0,0,0],
[0,1,8, 7,0,0, 0,0,0],
[4,0,0, 8,0,0, 0,0,1],

[0,6,0, 0,0,8, 0,0,0],
[1,0,0, 4,0,0, 3,0,0],
[0,7,0, 0,0,0, 8,2,9],

[0,2,0, 0,1,0, 0,0,0],
[0,0,0, 9,0,4, 2,7,0],
[6,0,0, 0,5,0, 1,0,0],
]";
const EXPERT_TEST_1: &str = "[
[0,0,0, 4,5,1, 0,0,0],
[0,0,0, 0,0,2, 0,0,9],
[0,0,0, 0,0,7, 0,6,2],

[0,0,4, 7,0,0, 0,1,0],
[0,5,1, 0,0,0, 2,0,0],
[0,0,0, 0,0,0, 0,5,0],

[0,2,0, 3,0,0, 0,0,0],
[6,0,0, 0,0,0, 3,0,8],
[7,0,0, 0,4,0, 0,0,0],
]";
const EVIL_TEST_1: &str = "[
[0,6,0, 0,4,0, 0,0,0],
[0,0,5, 6,0,2, 0,0,7],
[0,0,0, 0,8,0, 0,2,0],

[0,0,7, 0,0,0, 1,0,0],
[0,5,0, 3,0,9, 0,4,0],
[0,0,0, 0,6,0, 0,0,0],

[9,0,0, 0,0,0, 0,0,4],
[0,3,0, 2,0,5, 0,9,0],
[0,0,0, 0,0,8, 0,0,0],
]";
const IMPOSSIBLE_TEST_1: &str = "[
[0,6,0, 0,4,0, 0,0,0],
[0,0,5, 6,0,2, 0,0,7],
[0,0,0, 0,8,0, 0,2,0],

[0,0,7, 0,0,0, 1,0,0],
[0,5,0, 3,0,9, 0,4,0],
[0,0,0, 0,6,0, 0,0,0],

[9,0,0, 0,0,0, 0,0,4],
[0,3,0, 2,0,5, 0,9,0],
[0,0,0, 0,0,8, 0,0,0],
]";

const TEST_VEC: [&str; 7] = [
    SOLVED_TEST_1,
    EASY_TEST_1,
    MEDIUM_TEST_1,
    HARD_TEST_1,
    EXPERT_TEST_1,
    EVIL_TEST_1,
    IMPOSSIBLE_TEST_1,
];

// This is the main function
fn main() {
    eprintln!("Running");
    for test in TEST_VEC {
        eprintln!("Starting new test");
        let mut board = Board::new(test);
        eprintln!("Solving");
        eprintln!("{:?}", board.solve());
    }
}
